round((T1^2), digits = 4)
if (round((T1^2), digits = 4) == y){
print("the square of  5% upper quantile of Z/√X = y")
} else {
print("the square of  5% upper quantile of Z/√X != y")
}
round((T1^2), digits = 4) == y
round((y), digits = 4)
b <- round((y), digits = 4)
a <- round((T1^2), digits = 4)
if (a==b){
print("the square of  5% upper quantile of Z/√X = y")
} else {
print("the square of  5% upper quantile of Z/√X != y")
}
# a)
print("The form for the simple linear regression is y = μx₁+βx₂+ε")
print("X is",A)
A <- matrix((1,1,1,-1),2,2)
print("X is",A)
X <- matrix(c(1,1,1,-1),2,2)
print("X is",X)
print("X is",X)
X
print.matrix(X)
X
print("X is")
X
X <- matrix(c(1,-1),2,1)
print("X is")
X
#Q12
Y <- c(3.3,2.5,4.7,0.25,3.0,1.03,1.75,8)
X1 <- c(34,47,25,56,29,62,41,24)
mean(X1)
mean(Y)
n <- 8
#a)
plot(X1, Y)
#b)
regression <- lm(Y~X1)
summary(regression)
abline(regression)
#c)
print("Conduct hypothesis testing")
coef(regression)
SSE <- sum((fitted(regression) - Y)^2)
SSE
sigma_2 = SSE/(8-2)
sigma_2
Sxx <- sum((X1 - mean(X1))^2)
Sxx
Syy <- sum((Y - mean(Y))^2)
Syy
pt(1-0.5/2,18-2)
#c)
x=0
y <- -0.09375581+0.40710656*x
y
#d)
print("i think answer in c is not reasonable since the value of itme could not be 0")
print(" Therefore, i think the key is to remove the y-intersect")
print("we can diretly set the y-intersect to 0. New Model : y = 0.40710656*x")
#e)
pt(1-0.5/2,18-2)
qt(1-0.5/2,18-2)
qt(0.975,16)
qt(0.975,16)
Sec_Term <- qt(0.975,16) * sigma_1 * (1/n+(x0-mean(X1))^2/Sxx)^(1/2)
#Q12
data <- read.csv("Q12.csv",header = TRUE)
data <- data[,1:2]
data
Y <- data[,2]
X1 <- data[,1]
n <-18
#a)
plot(X1, Y)
#b)
regression <- lm(Y~X1)
summary(regression)
abline(regression)
# for c,d, e
mean(X1)
coef(regression)
SSE <- sum((fitted(regression) - Y)^2)
SSE
sigma_2 = SSE/(18-2)
sigma_2
sigma_1 = sqrt(sigma_2)
sigma_1
Sxx <- sum((X1 - mean(X1))^2)
Sxx
Syy <- sum((Y - mean(Y))^2)
Syy
qt(0.975,16)
#d)
x0<- 100
l_hat <- coef(regression)[1]+ coef(regression)[2]*x0
l_hat
Sec_Term <- qt(0.975,16) * sigma_1 * (1/n+(x0-mean(X1))^2/Sxx)^(1/2)
Sec_Term
CI <- c(l_hat-Sec_Term,l_hat+Sec_Term)
CI
#e)
x0<- 100
l_hat <- coef(regression)[1]+ coef(regression)[2]*x0
l_hat
Sec_Term <- pt(0.5/2,18-2) * sigma_1 * (1/n+(x0-mean(X1))^2/Sxx+1)^(1/2)
Sec_Term
CI <- c(l_hat-Sec_Term,l_hat+Sec_Term)
CI
data <- read.csv("Q12.csv",header = TRUE)
data <- data[,1:2]
data
Y <- data[,2]
X1 <- data[,1]
n <-18
#a)
plot(X1, Y)
#b)
regression <- lm(Y~X1)
summary(regression)
abline(regression)
mean(X1)
coef(regression)
SSE <- sum((fitted(regression) - Y)^2)
SSE
sigma_2 = SSE/(18-2)
sigma_2
sigma_1 = sqrt(sigma_2)
sigma_1
Sxx <- sum((X1 - mean(X1))^2)
Sxx
Syy <- sum((Y - mean(Y))^2)
Syy
qt(0.975,16)
l_hat <- coef(regression)[1]+ coef(regression)[2]*x0
l_hat
Sec_Term <- qt(0.975,16) * sigma_1 * (1/n+(x0-mean(X1))^2/Sxx)^(1/2)
Sec_Term
CI <- c(l_hat-Sec_Term,l_hat+Sec_Term)
CI
#e)
x0<- 100
l_hat <- coef(regression)[1]+ coef(regression)[2]*x0
l_hat
Sec_Term <- qt(0.975,16) * sigma_1 * (1/n+(x0-mean(X1))^2/Sxx+1)^(1/2)
Sec_Term
CI <- c(l_hat-Sec_Term,l_hat+Sec_Term)
CI
x2<-40
l_hat <- coef(regression)[1]+ coef(regression)[2]*x0
l_hat
l_hat <- coef(regression)[2]*(x1-x2)
l_hat
Sec_Term <- qt(0.975,16) * sigma_1 * (1/n+(x1-x2)^2/Sxx)^(1/2)
x1<- 100
x2<-40
l_hat <- coef(regression)[2]*(x1-x2)
l_hat
Sec_Term <- qt(0.975,16) * sigma_1 * (1/n+(x1-x2)^2/Sxx)^(1/2)
Sec_Term
CI <- c(l_hat-Sec_Term,l_hat+Sec_Term)
CI
mean(X1)
coef(regression)
SSE <- sum((fitted(regression) - Y)^2)
SSE
sigma_2 = SSE/(18-2)
sigma_2
sigma_1 = sqrt(sigma_2)
sigma_1
Sxx <- sum((X1 - mean(X1))^2)
Sxx
Syy <- sum((Y - mean(Y))^2)
Syy
qt(0.975,16)
mean(X1)
coef(regression)
SSE <- sum((fitted(regression) - Y)^2)
SSE
sigma_2 = SSE/(18-2)
sigma_2
sigma_1 = sqrt(sigma_2)
sigma_1
Sxx <- sum((X1 - mean(X1))^2)
Sxx
Syy <- sum((Y - mean(Y))^2)
Syy
qt(0.975,16)
#d)
x0<- 100
l_hat <- coef(regression)[1]+ coef(regression)[2]*x0
l_hat
Sec_Term <- qt(0.975,16) * sigma_1 * (1/n+(x0-mean(X1))^2/Sxx)^(1/2)
Sec_Term
CI <- c(l_hat-Sec_Term,l_hat+Sec_Term)
CI
#e)
x0<- 100
l_hat <- coef(regression)[1]+ coef(regression)[2]*x0
l_hat
Sec_Term <- qt(0.975,16) * sigma_1 * (1/n+(x0-mean(X1))^2/Sxx+1)^(1/2)
Sec_Term
CI <- c(l_hat-Sec_Term,l_hat+Sec_Term)
CI
#d)
x0<- 100
l_hat <- coef(regression)[1]+ coef(regression)[2]*x0
l_hat
Sec_Term <- qt(0.975,16) * sigma_1 * (1/n+(x0-mean(X1))^2/Sxx)^(1/2)
Sec_Term
CI <- c(l_hat-Sec_Term,l_hat+Sec_Term)
CI
#e)
x0<- 100
l_hat <- coef(regression)[1]+ coef(regression)[2]*x0
l_hat
Sec_Term <- qt(0.975,16) * sigma_1 * (1/n+(x0-mean(X1))^2/Sxx+1)^(1/2)
Sec_Term
CI <- c(l_hat-Sec_Term,l_hat+Sec_Term)
CI
#f)
qt(0.975,16)
#f)
qt(0.95,16)
zi <- coef(regression)[2]*(x1-x2)
zi
mu <- sigma_1*(1/n+(x1-x2)^2/Sxx)^(1/2)
mu
zi/mu
# a)
a = qchisq(0.9,df=4)
a
#     for F = (Z^2/1)/(X/4) ~ F(1,2) -> 4F = (Z^2)/(X)
qf(0.9,1,4)
b =qf(0.9,1,4)/4
b
#     for T = (Z)/(X/4)^1/2 ~ t(4) -> 2T = (Z)/(X)^1/2
c = qt(0.9,4)/2
c
# a)
a = qchisq(0.9,df=4)
a
#     for F = (Z^2/1)/(X/4) ~ F(1,2) -> 4F = (Z^2)/(X)
qf(0.9,1,4)
b =qf(0.9,1,4)/4
b
#     for T = (Z)/(X/4)^1/2 ~ t(4) -> 2T = (Z)/(X)^1/2
c = qt(0.9,4)/2
c
# a)
a = qchisq(0.9,df=4)
a
#     for F = (Z^2/1)/(X/4) ~ F(1,2) -> 4F = (Z^2)/(X)
qf(0.9,1,4)
b =qf(0.9,1,4)/4
b
#     for T = (Z)/(X/4)^1/2 ~ t(4) -> 2T = (Z)/(X)^1/2
c = qt(0.9,4)/2
c
# b)
x <- a
y <- b
t <- c
# i)
pchisq(x,4)
# ii)
pf(4*y,1,4)
# iii)
pf(4/y,1,4)
# iv)
pt(2*t,4)
# v)
2*(1-pt(t/2,4))
# b)
x <- a
y <- b
t <- c
# i)
pchisq(x,4)
# ii)
pf(4*y,1,4)
# iii)
pf(4/y,1,4)
# iv)
pt(2*t,4)
# v)
2*(1-pt(t/2,4))
# c)
2*qt(0.95,4)
T1 <-2*qt(0.95,4)
a <- round((T1^2), digits = 4)
b <- round((y), digits = 4)
if (a==b){
print("the square of  5% upper quantile of Z/√X = y")
} else {
print("the square of  5% upper quantile of Z/√X != y")
}
# c)
2*qt(0.95,4)
T1 <-2*qt(0.95,4)
a <- round((T1^2), digits = 4)
b <- round((y), digits = 4)
if (a==b){
print("the square of  5% upper quantile of Z/√X = y")
} else {
print("the square of  5% upper quantile of Z/√X != y")
}
# c)
qt(0.95,4)/2
T1 <-2*qt(0.95,4)
a <- round((T1^2), digits = 4)
b <- round((y), digits = 4)
if (a==b){
print("the square of  5% upper quantile of Z/√X = y")
} else {
print("the square of  5% upper quantile of Z/√X != y")
}
# c)
qt(0.95,4)/2
T1 <-qt(0.95,4)/2
a <- round((T1^2), digits = 4)
b <- round((y), digits = 4)
if (a==b){
print("the square of  5% upper quantile of Z/√X = y")
} else {
print("the square of  5% upper quantile of Z/√X != y")
}
#f)
sigma_1
c <- matrix(c(0,60))
c.T = t(c)
c.T
c
c.T = t(c)
c.T
Xf <-matrix(c(1,100,1,60),2,2)
a <- matrix(c(1,-1))
c <- a %*% Xf
Xf <-matrix(c(1,100,1,60),2,2)
a <- matrix(c(1,-1))
Xf
Xf <-matrix(c(1,1,100,60),2,2)
a <- matrix(c(1,-1))
Xf
a
c <- t(a) %*% Xf
c
Xf <-matrix(c(1,1,100,40),2,2)
a <- matrix(c(1,-1))
Xf
a
c <- t(a) %*% Xf
c
c.T = t(c)
c.T
Hat <- c.T %*%solve(t(Xf) %*% Xf)  %*% c
c.T
c.T
c <- t(a) %*% Xf
c
Hat <- c %*%solve(t(Xf) %*% Xf)  %*% c.T
Hat
Xf
solve(t(Xf) %*% Xf)
c %*% solve(t(Xf) %*% Xf)
c %*% solve(t(Xf) %*% Xf) %*% c.T
se <- sigma_1 + c %*%solve(t(Xf) %*% Xf)  %*% c.T
se <- sigma_1 + (c %*%solve(t(Xf) %*% Xf)  %*% c.T)^(1/2)
se
se <- sigma_1 + (c %*%solve(t(Xf) %*% Xf)  %*% c.T)^(1/2)
se
qt(0.95,df=16)
data <- read.csv("Q12.csv",header = TRUE)
data <- data[,1:2]
data
Y <- data[,2]
X1 <- data[,1]
n <-18
#a)
plot(X1, Y)
#b)
regression <- lm(Y~X1)
summary(regression)
coef(regression)
SSE <- sum((fitted(regression) - Y)^2)
SSE
sigma_2 = SSE/(18-2)
sigma_2
sigma_1 = sqrt(sigma_2)
sigma_1
c %*%solve(t(Xf) %*% Xf)  %*% c.T
se <- sigma_1 * (c %*%solve(t(Xf) %*% Xf)  %*% c.T)^(1/2)
se
#f)
sigma_1
Xf <-matrix(c(1,1,100,40),2,2)
a <- matrix(c(1,-1))
Xf
a
c <- t(a) %*% Xf
c
c.T = t(c)
c.T
se <- sigma_1 * (c %*%solve(t(Xf) %*% Xf)  %*% c.T)^(1/2)
se
qt(0.95,df=16)
Y <- <-matrix(c(130,147,145,146,152,154,151,159))
Y <- matrix(c(130,147,145,146,152,154,151,159))
Y
sum(Y)
sum(Y)/8
sum(Y)
sum(Y)/8
sum(Y[1:4])
Y[1:4]
sum(Y[5:8])
-1/8*Y[1:4]
-1/8*sum(Y[1:4])+sum(Y[5:8])*1/8
X <- matrix(c(1,1,1,1,1,1,1,1,-1,-1,-1,-1,1,1,1,1),2,2)
X
X <- matrix(c(1,1,1,1,1,1,1,1,-1,-1,-1,-1,1,1,1,1),8,2)
X
Hat %*% Y
Y <- matrix(c(130,147,145,146,152,154,151,159))
Y
sum(Y)
sum(Y)/8
sum(Y[1:4])
sum(Y[5:8])
-1/8*sum(Y[1:4])+sum(Y[5:8])*1/8
X <- matrix(c(1,1,1,1,1,1,1,1,-1,-1,-1,-1,1,1,1,1),8,2)
X
Hat <- solve(X.t %*% X)  %*% (X.t)
X.t =t(X)
Hat <- solve(X.t %*% X)  %*% (X.t)
Hat %*% Y
beta = Hat %*% Y
beta[1]
sum(Y[1:4]-(beta[1]-beta[2]))
Y[1:4]-(beta[1]-beta[2])
sum((Y[1:4]-(beta[1]-beta[2]))^(1/2))
Y[1:4]-(beta[1]-beta[2])
sum((Y[1:4]-(beta[1]-beta[2]))^(2))
sum((Y[1:4]-(beta[1]+beta[2]))^(2))
sum((Y[5:8]-(beta[1]+beta[2]))^(2))
se <- sigma_1 * (c %*%solve(t(Xf) %*% Xf)  %*% c.T+2)^(1/2)
se
#f)
sigma_1
Xf <-matrix(c(1,1,100,40),2,2)
a <- matrix(c(1,-1))
Xf
a
c <- t(a) %*% Xf
c
c.T = t(c)
c.T
se <- sigma_1 * (c %*%solve(t(Xf) %*% Xf)  %*% c.T+2)^(1/2)
se
qt(0.95,df=16)
#f)
sigma_1
Xf <-matrix(c(1,1,100,40),2,2)
a <- matrix(c(1,-1))
Xf
a
c <- t(a) %*% Xf
c
c.T = t(c)
c.T
se <- sigma_1 * (c %*%solve(t(Xf) %*% Xf)  %*% c.T+2)^(1/2)
se
qt(0.95,df=16)
#f)
sigma_1
Xf <-matrix(c(1,1,100,40),2,2)
a <- matrix(c(1,-1))
Xf
a
c <- t(a) %*% Xf
c
c.T = t(c)
c.T
se <- sigma_1 * (c %*%solve(t(Xf) %*% Xf)  %*% c.T+2)^(1/2)
se
qt(0.95,df=16)
qt(0.975,25)
data <- read.csv("data_folder/nba.csv",header = TRUE)
data <- read.csv("data_folder/NBA.csv",header = TRUE)
y <- data[,2]
x1 <- data[,3]
x2<- data[,4]
x3<- data[,5]
x4 <- data[,6]
model <- lm(y~x1+x2+x3+x4)
summary(model)
SSE <- sum(model$residuals^2)
SST <- sum((y-mean(y))^2)
MSE <- SSE/25
R-square = 1-SSR/SST
R-square <- 1-SSR/SST
SSR <- SST-SSE
R-square <- 1-SSR/SST
R_square <- 1-SSR/SST
R_square
modeld <- lm(y~x3)
summary(modeld)
pf(0.2516,1,4)
pt(0.7375,4)
